// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String     @id @default(uuid())
  username        String     @unique
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
}

model Profile {
  id          String               @id @default(uuid())
  username    String               @unique
  name        String?
  headline    String?
  location    String?
  profileUrl  String?
  lastUpdated DateTime?
  viewedBy    String?
  experienceCount Int?
  educationCount Int?
  engagements Engagement[]
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id           String               @id @default(uuid())
  companyId    String               @unique
  name         String
  engagements  Engagement[]
}

// Create a join table for the many-to-many relationship
model Engagement {
  id           String     @id @default(uuid())
  startDate    DateTime?
  endDate      DateTime?
  type         String     // "experience", "education", or "volunteering"
  profile      Profile    @relation(fields: [profileId], references: [id])
  profileId    String
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  order          Int

  @@unique([profileId, organizationId, type])
}
